participant client
participant "entry plugin" as pluginIn
participant connector
participant connector.handler as handler
participant app
participant connector.forwarder as forwarder
participant "forwared plugin" as pluginOut

note over handler, app
   app is a (probably remote) app in charge of the
   business logic of the receiver of payments
   (webshop, stream service, ...)
   handler is the local connector handler that
   bridge received data ("conditions + endToEndData")
   with the (probably remote) app
end note

// CONNECTOR BOOT-UP (executed once at connector start-up)
connector -> connector: read config
connector -> connector: instantiate plugins
connector -> connector: instantiate data handler
connector -> pluginIn: register handler

// PAYMENT SETUP PHASE (client and app agree on payment)
client <-> app: setup quantity/fulfillment/condition
...
// PAYMENT PHASE (client invoques closest connector with data)
client -> pluginIn : data
pluginIn -> handler: data
handler -> app: search fulfillment matching condition
alt
else fulfillment found
    handler -> handler: remove fulfillment
else fulfillment not found
    handler -> connector: data
    connector -> forwarder: data
    forwarder -> forwarder: find next hop route/plugin
    forwarder -> forwarder: new ammount = ammount - toll
    forwarder -> connector: next plugin, new ammount
    forwarder -> pluginOut: new data
    ...
    pluginOut -> forwarder: (delayed) fulfillment
    forwarder -> connector: fulfillment
    connector -> handler: fulfillment
end
handler -> pluginIn: fulfillment
pluginIn  -> client:  fulfillment
